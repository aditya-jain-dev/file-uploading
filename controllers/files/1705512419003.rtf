{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red63\green70\blue89;\red255\green255\blue255;\red69\green58\blue208;
\red214\green80\blue93;\red252\green241\blue241;}
{\*\expandedcolortbl;;\cssrgb\c31373\c34902\c42353;\cssrgb\c100000\c100000\c100000;\cssrgb\c34118\c33333\c85098;
\cssrgb\c87843\c40784\c43922;\cssrgb\c99216\c95686\c95686;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0

\f0\fs32 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Cloudinary is a cloud-based media management platform that provides a wide range of services related to media, such as image and video upload, storage, manipulation, optimization, and delivery. It allows developers to easily manage media content on their websites or applications, without worrying about server-side infrastructure.\
To add Cloudinary to an Express.js application, you can follow these steps:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create a Cloudinary account: If you don't have a Cloudinary account yet, you can sign up for a free account at\'a0{\field{\*\fldinst{HYPERLINK "https://cloudinary.com/users/register/free"}}{\fldrslt \cf4 \strokec4 https://cloudinary.com/users/register/free}}.\cb1 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Install the Cloudinary SDK: You can install the Cloudinary SDK for Node.js using npm, the Node.js package manager. Run the following command in your terminal:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\fs27\fsmilli13600 \cf5 \cb6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 npm install cloudinary 
\f0\fs32 \cf2 \cb1 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Configure Cloudinary: In your Express.js application, you need to configure Cloudinary with your account credentials. You can do this by creating a Cloudinary instance with your account name, API key, and API secret:\cb1 \uc0\u8232 
\f1\fs27\fsmilli13600 \cf5 \cb6 \strokec5 const cloudinary = require("cloudinary").v2;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 cloudinary.config(\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \{ \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5    cloud_name: "your_cloud_name", \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5    api_key: "your_api_key", \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	9	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5    api_secret: "your_api_secret", \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	10	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	11	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 ); 
\f0\fs32 \cf2 \cb1 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	12	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Upload media to Cloudinary: Once you have configured Cloudinary, you can upload media to it using the\'a0
\f1\fs27\fsmilli13600 \cf5 \cb6 \strokec5 cloudinary.uploader.upload()
\f0\fs32 \cf2 \cb3 \strokec2 \'a0method. For example, to upload an image file, you can use the following code:\cb1 \uc0\u8232 
\f1\fs27\fsmilli13600 \cf5 \cb6 \strokec5 const file = req.files.file; \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	13	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 cloudinary.uploader.upload(file.tempFilePath, function (error, result) \{ \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	14	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	15	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 if (error) \{ \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	16	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     console.error(error); \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	17	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     res.status(500).send("Error uploading file to Cloudinary"); \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	18	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \}\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	19	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 else \{ \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	20	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     console.log(result); \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	21	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     res.send("File uploaded to Cloudinary"); \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	22	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \} \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	23	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \}); 
\fs32 \cf2 \cb1 \strokec2 \uc0\u8232 
\f0 \cb3 This code uses the\'a0
\f1\fs27\fsmilli13600 \cf5 \cb6 \strokec5 req.files
\f0\fs32 \cf2 \cb3 \strokec2 \'a0object to get the uploaded file, and then passes its temporary file path to the\'a0
\f1\fs27\fsmilli13600 \cf5 \cb6 \strokec5 cloudinary.uploader.upload()
\f0\fs32 \cf2 \cb3 \strokec2 \'a0method. The method uploads the file to Cloudinary and returns a response, which you can handle in the callback function.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	24	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Use Cloudinary URLs: After you have uploaded media to Cloudinary, you can use its URLs in your application to display or manipulate the media. For example, to display an image, you can use the following code:\cb1 \uc0\u8232 
\f1\fs27\fsmilli13600 \cf5 \cb6 \strokec5 <img src="https://res.cloudinary.com/your_cloud_name/image/upload/c_scale,w_300/sample.jpg" alt="Sample Image">
\f0\fs32 \cf2 \cb1 \strokec2 \uc0\u8232 \cb3 This code uses the Cloudinary URL for the uploaded image, and adds parameters to it to resize and scale the image.\cb1 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 \cb3 Overall, Cloudinary can be a powerful addition to an Express.js application, providing an easy way to manage media content and offloading server-side infrastructure.\
}